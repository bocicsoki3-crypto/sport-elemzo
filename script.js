// --- ALKALMAZ√ÅS √ÅLLAPOT ---
const appState = {
    gasUrl: 'https://script.google.com/macros/s/AKfycbyN99ot1yzv4Na9nq0rTIsCSQ2DUlMMCzSKQmtM8fg7qDMAaFzHW8n_2Y8eNxnsFdabvg/exec', // <-- Ellen≈ërizd!
    fixtures: [],
    currentSport: 'soccer', // Kezd≈ë√©rt√©k
    sheetUrl: '',
    currentAnalysisContext: '',
    chatHistory: [],
    completedAnalyses: [],
    analysisQueue: [],
    isAnalysisRunning: false
};

// --- LIGA KATEG√ìRI√ÅK ---
const LEAGUE_CATEGORIES = {
    soccer: {
        'üéØ Pr√©mium Elemz√©s': [ 'Champions League', 'Premier League', 'Bundesliga', 'LaLiga', 'Serie A' ],
        'üìà Stabil Lig√°k': [ 'Europa League', 'Ligue 1', 'Eredivisie', 'Liga Portugal' ],
        '‚ùî V√°ltoz√©kony Mez≈ëny': [ 'Championship', '2. Bundesliga', 'Serie B', 'LaLiga2', 'Super Lig', 'Premiership', 'MLS' ],
        'üé≤ Vad K√°rty√°k': [ 'FIFA World Cup', 'UEFA European Championship', 'Conference League', 'Brazil Serie A', 'Argentinian Liga Profesional', 'Greek Super League', 'Nemzetek Lig√°ja', 'Kupa', 'Copa', 'Cup', 'World Cup Qualifier', 'European Championship', 'Nations League' ]
    },
    hockey: { 'üéØ Pr√©mium Elemz√©s': [ 'NHL' ], 'üìà Stabil Lig√°k': [ 'KHL', 'SHL', 'Liiga', 'DEL', 'AHL', 'ICEHL', 'Champions Hockey League' ], 'üé≤ Vad K√°rty√°k': [ 'IIHF World Championship', 'Olimpiai J√°t√©kok', 'Spengler Cup', 'Extraliga', 'World U20 Championship' ] },
    basketball: { 'üéØ Pr√©mium Elemz√©s': [ 'NBA', 'Euroleague' ], 'üìà Stabil Lig√°k': [ 'Liga ACB', 'BSL', 'BBL', 'Lega A' ], 'üé≤ Vad K√°rty√°k': [ 'FIBA World Cup', 'Olimpiai J√°t√©kok', 'EuroBasket', 'FIBA Champions League', 'EuroCup', 'LNB Pro A', 'WNBA' ] }
};


// --- INICIALIZ√ÅL√ÅS ---
document.addEventListener('DOMContentLoaded', () => {
    // Biztos√≠tjuk, hogy a currentSport a selectb≈ël j√∂jj√∂n indul√°skor is
    appState.currentSport = document.getElementById('sportSelector')?.value || 'soccer'; // Default soccer
    setupThemeSwitcher();

    if(!appState.gasUrl || !appState.gasUrl.startsWith('https://script.google.com')){
        document.getElementById('userInfo').textContent='HIBA: GAS URL nincs be√°ll√≠tva!';
        document.getElementById('userInfo').style.color = 'var(--danger)';
    } else {
        document.getElementById('userInfo').textContent=`Csatlakozva`;
    }
    appState.sheetUrl = localStorage.getItem('sheetUrl');
    if (appState.sheetUrl) {
         document.getElementById('userInfo').textContent += ` | Napl√≥: Be√°ll√≠tva`;
    } else {
         document.getElementById('userInfo').textContent += ` | Napl√≥: Nincs be√°ll√≠tva`;
    }

    const toastContainer = document.createElement('div');
    toastContainer.id = 'toast-notification-container';
    toastContainer.className = 'toast-notification-container';
    document.body.appendChild(toastContainer);

    const savedAnalyses = sessionStorage.getItem('completedAnalyses');
    if (savedAnalyses) {
        try {
            appState.completedAnalyses = JSON.parse(savedAnalyses);
            updatePortfolioButton();
        } catch (e) { console.error("Hiba a portf√≥li√≥ adatok bet√∂lt√©sekor:", e); sessionStorage.removeItem('completedAnalyses'); }
    }

    // Esem√©nyfigyel≈ëk (biztons√°gosabb hozz√°ad√°s)
    const kanbanBoard = document.getElementById('kanban-board');
    const mobileList = document.getElementById('mobile-list-container');
    if(kanbanBoard) kanbanBoard.addEventListener('change', handleCheckboxChange);
    if(mobileList) mobileList.addEventListener('change', handleCheckboxChange);

    // Automatikus bet√∂lt√©s indul√°skor (opcion√°lis, ha akarod)
    // loadFixtures();

});

// --- F≈ê FUNKCI√ìK ---

async function loadFixtures() {
    const loadBtn = document.getElementById('loadFixturesBtn');
    if(loadBtn) {
        loadBtn.disabled = true;
        loadBtn.textContent = 'Bet√∂lt√©s...';
    }
    const kanbanBoard = document.getElementById('kanban-board');
    const mobileList = document.getElementById('mobile-list-container');
    const placeholder = document.getElementById('placeholder');

    if(kanbanBoard) kanbanBoard.innerHTML = '';
    if(mobileList) mobileList.innerHTML = '';
    if(placeholder) {
        placeholder.style.display = 'flex';
        placeholder.innerHTML = `<p class="muted">Meccsek bet√∂lt√©se...</p>`; // Loading text
    }
    updateSummaryButtonCount();

    // ---> M√ìDOS√çT√ÅS: Explicit sport√°g olvas√°s itt <---
    const sportSelector = document.getElementById('sportSelector');
    const sportToLoad = sportSelector ? sportSelector.value : appState.currentSport; // Haszn√°lja a select √©rt√©k√©t, fallback az appState-re
    appState.currentSport = sportToLoad; // Friss√≠tj√ºk az appState-et is biztosan
    console.log(`loadFixtures ind√≠tva: ${sportToLoad}`); // Debug log
    // ---> M√ìDOS√çT√ÅS V√âGE <---

    try {
        // Ellen≈ërizz√ºk, hogy a sportToLoad √©rv√©nyes kulcs-e a LEAGUE_CATEGORIES-ben
        if (!LEAGUE_CATEGORIES[sportToLoad]) {
             throw new Error(`Bels≈ë hiba: Ismeretlen sport√°g (${sportToLoad}) a kateg√≥ri√°khoz.`);
        }

        const response = await fetch(`${appState.gasUrl}?action=getFixtures&sport=${sportToLoad}&days=2`);
        if (!response.ok) throw new Error(`H√°l√≥zati hiba: ${response.status}`);
        const data = await response.json();
        if (data.error) throw new Error(data.error);

        appState.fixtures = data.fixtures || [];
        sessionStorage.setItem('openingOdds', JSON.stringify(data.odds || {}));

        if (appState.fixtures.length === 0) {
            showToast(`Nincsenek ${sportToLoad} meccsek a k√∂vetkez≈ë 2 napban.`, 'info');
            if(placeholder) {
                placeholder.innerHTML = `<p class="muted">Nincsenek ${sportToLoad} meccsek a k√∂vetkez≈ë 2 napban.</p>`;
                placeholder.style.display = 'flex';
            }
        } else {
            if(placeholder) placeholder.style.display = 'none';
            // Itt h√≠vjuk a renderel√©st, ami a getLeagueGroup-ot haszn√°lja
            if (isMobile()) {
                renderFixturesForMobileList(appState.fixtures);
            } else {
                renderFixturesForDesktop(appState.fixtures);
            }
        }
    } catch (e) {
        console.error("Hiba a meccsek bet√∂lt√©sekor:", e); // Log error to console
        showToast(`Hiba a meccsek bet√∂lt√©sekor: ${e.message}`, 'error');
        if(placeholder) {
            placeholder.innerHTML = `<p style="color:var(--danger)">Hiba a meccsek bet√∂lt√©sekor: ${e.message}</p>`;
            placeholder.style.display = 'flex';
        }
    } finally {
        if(loadBtn) {
            loadBtn.disabled = false;
            loadBtn.textContent = 'Meccsek Bet√∂lt√©se';
        }
        updateSummaryButtonCount();
    }
}

async function runAnalysis(home, away, isSummary = false) { // √öj param√©ter: isSummary
    try {
        home = decodeURIComponent(home);
        away = decodeURIComponent(away);
    } catch (e) {
        console.error("Hiba a csapatnevek dek√≥dol√°sakor:", e);
        if (!isSummary) showToast("Hiba a csapatnevek feldolgoz√°sakor.", "error");
        return { error: "Hiba a csapatnevek feldolgoz√°sakor." }; // Visszaadja a hib√°t √∂sszegz√©shez
    }

    if (!isSummary) { // Csak akkor nyit modalt, ha nem √∂sszegz√©s r√©szek√©nt fut
        if (isMobile()) {
            showToast("Elemz√©s folyamatban... Ne v√°ltson m√°sik alkalmaz√°sra.", 'info', 6000);
        }
        const commonElements = document.getElementById('common-elements');
        if (!commonElements) { showToast("Hiba: Hi√°nyz√≥ UI elemek.", "error"); return; }
        openModal(`${home} vs ${away}`, commonElements.innerHTML, isMobile() ? 'modal-fullscreen' : 'modal-lg');

        const modalContainer = document.getElementById('modal-container');
        if (!modalContainer) return;
        const modalSkeleton = modalContainer.querySelector('#loading-skeleton');
        const modalResults = modalContainer.querySelector('#analysis-results');
        const modalChat = modalContainer.querySelector('#chat-container');
        if (modalSkeleton) modalSkeleton.classList.add('active');
        if (modalResults) modalResults.innerHTML = '';
        if (modalChat) modalChat.style.display = 'none';

        const chatSendBtn = modalChat?.querySelector('#chat-send-btn');
        const chatInput = modalChat?.querySelector('#chat-input');
        if (chatSendBtn) chatSendBtn.onclick = sendChatMessage;
        if (chatInput) chatInput.onkeyup = (e) => { if (e.key === "Enter") sendChatMessage(); };
    }

    try {
        let analysisUrl = `${appState.gasUrl}?action=runAnalysis&home=${encodeURIComponent(home)}&away=${encodeURIComponent(away)}&sport=${appState.currentSport}&force=false`; // force=false az √∂sszegz√©sn√©l cache haszn√°lat√°hoz
        if (appState.sheetUrl) { analysisUrl += `&sheetUrl=${encodeURIComponent(appState.sheetUrl)}`; }

        const openingOdds = sessionStorage.getItem('openingOdds') || '{}';
        let openingOddsData = {};
        try { openingOddsData = JSON.parse(openingOdds); } catch (e) { console.error("Hiba az openingOdds parse k√∂zben:", e); }

        const response = await fetch(analysisUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'text/plain;charset=utf-8' },
            body: JSON.stringify({ openingOdds: openingOddsData })
        });

        if (!response.ok) throw new Error(`Szerver v√°lasz hiba: ${response.status} ${response.statusText}`);
        const data = await response.json();
        if (data.error) throw new Error(data.error);

        // √ñsszegz√©s eset√©n csak a masterRecommendation kell
        if (isSummary) {
            return {
                home: home,
                away: away,
                recommendation: data.masterRecommendation || { recommended_bet: "Hiba", final_confidence: 0, brief_reasoning: "Nem √©rkezett aj√°nl√°s." }
            };
        }

        // Norm√°l elemz√©s eset√©n:
        if (!data.html || !data.masterRecommendation) throw new Error("Hi√°nyos adatok a szerver v√°lasz√°ban.");

        appState.currentAnalysisContext = data.html;
        appState.chatHistory = [];

        const modalContainer = document.getElementById('modal-container');
        const modalResults = modalContainer?.querySelector('#analysis-results');
        const modalSkeleton = modalContainer?.querySelector('#loading-skeleton');
        const modalChat = modalContainer?.querySelector('#chat-container');
        const chatMessages = modalChat?.querySelector('#chat-messages');

        if (modalResults) modalResults.innerHTML = `<div class="analysis-body">${data.html}</div>`;
        if (modalSkeleton) modalSkeleton.classList.remove('active');
        if (modalChat) modalChat.style.display = 'block';
        if (chatMessages) chatMessages.innerHTML = '';

        if (data.debugInfo) console.log("Szerver Debug Info:", data.debugInfo);

        // Portf√≥li√≥hoz ad√°s (csak norm√°l elemz√©sn√©l)
        const portfolioData = extractDataForPortfolio(data.html, home, away); // Ez most a Mester Aj√°nl√°st is figyelhetn√©
        if (portfolioData && !appState.completedAnalyses.some(a => a.match === portfolioData.match)) {
            if (appState.completedAnalyses.length < 3) {
                appState.completedAnalyses.push(portfolioData);
                sessionStorage.setItem('completedAnalyses', JSON.stringify(appState.completedAnalyses));
                updatePortfolioButton();
            } else { showToast("Portf√≥li√≥ megtelt (max 3).", "info"); }
        }

    } catch (e) {
        console.error(`Hiba az elemz√©s futtat√°sa sor√°n (${home} vs ${away}):`, e);
        if (isSummary) {
            return { home: home, away: away, error: e.message }; // Hib√°t ad vissza √∂sszegz√©shez
        } else {
            const modalContainer = document.getElementById('modal-container');
            const modalResults = modalContainer?.querySelector('#analysis-results');
            const modalSkeleton = modalContainer?.querySelector('#loading-skeleton');
            const modalChat = modalContainer?.querySelector('#chat-container');
            if (modalResults) modalResults.innerHTML = `<p style="color:var(--danger); text-align:center; padding: 2rem;">Hiba: ${e.message}</p>`;
            if (modalSkeleton) modalSkeleton.classList.remove('active');
            if (modalChat) modalChat.style.display = 'none';
        }
    }
}

async function summarizeSelectedFixtures() {
    const checkboxes = document.querySelectorAll('.fixture-checkbox:checked');
    const selectedFixtures = [];
    checkboxes.forEach(cb => {
        selectedFixtures.push({
            home: cb.dataset.home, // M√°r k√≥dolt
            away: cb.dataset.away  // M√°r k√≥dolt
        });
    });

    if (selectedFixtures.length === 0) {
        showToast("Nincsenek kiv√°lasztott meccsek az √∂sszegz√©shez.", "info");
        return;
    }

    const summaryBtn = document.getElementById('summaryBtn');
    if(summaryBtn){
        summaryBtn.disabled = true;
        summaryBtn.textContent = `√ñsszegz√©s: 0/${selectedFixtures.length}...`;
    }

    openSummaryModal('√ñsszegz√©s Folyamatban', `<div id="summary-progress"><p>Elemz√©sek lek√©r√©se: 0 / ${selectedFixtures.length}</p><ul id="summary-results-list" class="summary-results-list"></ul></div>`);
    const resultsList = document.getElementById('summary-results-list');
    const progressText = document.querySelector('#summary-progress p');

    appState.analysisQueue = [...selectedFixtures]; // Use the already encoded names
    appState.isAnalysisRunning = true;
    let completedCount = 0;
    const allResults = [];

    const runNextAnalysis = async () => {
        if (appState.analysisQueue.length === 0 || !appState.isAnalysisRunning) { // Check isAnalysisRunning flag
            appState.isAnalysisRunning = false;
            if(summaryBtn) summaryBtn.disabled = false;
            updateSummaryButtonCount();
            if(progressText) progressText.textContent = `√ñsszegz√©s befejezve (${completedCount} / ${selectedFixtures.length}).`;
            return;
        }

        const fixture = appState.analysisQueue.shift();
        // Pass encoded names directly to runAnalysis
        const result = await runAnalysis(fixture.home, fixture.away, true);
        completedCount++;
        allResults.push(result);

        if (resultsList) { // Check if resultsList exists
            const listItem = document.createElement('li');
            // Decode names for display
            const displayHome = decodeURIComponent(result.home);
            const displayAway = decodeURIComponent(result.away);

            if (result.error) {
                listItem.innerHTML = `<strong>${displayHome} vs ${displayAway}:</strong> <span style="color:var(--danger)">Hiba: ${result.error.substring(0, 100)}...</span>`;
            } else if (result.recommendation) {
                const conf = result.recommendation.final_confidence;
                const confClass = conf >= 7 ? 'high' : conf >= 5 ? 'medium' : 'low';
                listItem.innerHTML = `<strong>${displayHome} vs ${displayAway}:</strong>
                    <span class="recommendation-pill ${confClass}">
                        ${result.recommendation.recommended_bet} (${conf.toFixed(1)}/10)
                    </span>
                    <em class="muted">- ${result.recommendation.brief_reasoning}</em>`;
            }
            resultsList.appendChild(listItem);
            resultsList.scrollTop = resultsList.scrollHeight;
        }


        if(summaryBtn) summaryBtn.textContent = `√ñsszegz√©s: ${completedCount}/${selectedFixtures.length}...`;
        if(progressText) progressText.textContent = `Elemz√©sek lek√©r√©se: ${completedCount} / ${selectedFixtures.length}`;

        // Delay only if analysis is still running
        if (appState.isAnalysisRunning) {
            setTimeout(runNextAnalysis, 750);
        }
    };

    runNextAnalysis();
}

async function logBet(betData) {
    const logButton = event ? event.target : null;
    if (logButton) { logButton.disabled = true; logButton.textContent = '...'; }

    if (!appState.sheetUrl) {
        showToast("Napl√≥z√°shoz URL sz√ºks√©ges.", "info");
        const url = prompt("Google T√°bl√°zat URL:", localStorage.getItem('sheetUrl') || "");
        if (url && url.startsWith('https://docs.google.com/spreadsheets/d/')) {
            appState.sheetUrl = url; localStorage.setItem('sheetUrl', url);
            document.getElementById('userInfo').textContent = `Csatlakozva | Napl√≥: Be√°ll√≠tva`;
            showToast("URL mentve.", "success");
        } else {
            showToast('√ârv√©nytelen URL/Megszak√≠tva.', 'error');
            if (logButton) { logButton.disabled = false; logButton.textContent = 'Napl√≥z√°s'; }
            return;
        }
    }

    try {
        const response = await fetch(appState.gasUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'text/plain;charset=utf-8' },
            body: JSON.stringify({ action: 'logBet', sheetUrl: appState.sheetUrl, bet: betData })
        });
        if (!response.ok) { throw new Error(`Szerver hiba: ${response.status}`); }
        const data = await response.json();
        if (data.error) { throw new Error(data.error); }
        if (data.success) {
            showToast(`"${betData.market}" napl√≥zva! √öj bankroll: ${data.newBankroll?.toFixed(2) || 'N/A'}`, 'success');
             if (logButton) { logButton.textContent = 'Napl√≥zva ‚úîÔ∏è'; }
        } else { throw new Error("Ismeretlen szerver hiba."); }
    } catch (e) {
        console.error("Napl√≥z√°si hiba:", e); showToast(`Napl√≥z√°si hiba: ${e.message}`, 'error');
        if (logButton) { logButton.disabled = false; logButton.textContent = 'Napl√≥z√°s'; }
    }
}

async function openHistoryModal() {
    if (!appState.sheetUrl) {
        showToast("URL sz√ºks√©ges.", "info");
        const url = prompt("Google T√°bl√°zat URL:", localStorage.getItem('sheetUrl') || "");
        if (url && url.startsWith('https://docs.google.com/spreadsheets/d/')) {
            appState.sheetUrl = url; localStorage.setItem('sheetUrl', url);
            document.getElementById('userInfo').textContent = `Csatlakozva | Napl√≥: Be√°ll√≠tva`;
            showToast("URL mentve.", "success");
        } else { if (url) { showToast('√ârv√©nytelen URL.', 'error'); } return; }
    }
    const modalSize = isMobile() ? 'modal-fullscreen' : 'modal-lg';
    const loadingHTML = document.getElementById('loading-skeleton')?.outerHTML || '<p>Bet√∂lt√©s...</p>';
    openModal('El≈ëzm√©nyek', loadingHTML, modalSize);
    const modalSkeleton = document.querySelector('#modal-container #loading-skeleton');
    if (modalSkeleton) modalSkeleton.classList.add('active');

    try {
        const response = await fetch(`${appState.gasUrl}?action=getHistory&sheetUrl=${encodeURIComponent(appState.sheetUrl)}`);
         if (!response.ok) throw new Error(`H√°l√≥zati hiba: ${response.status}`);
        const data = await response.json();
        if (data.error) throw new Error(data.error);
        const modalBody = document.getElementById('modal-body');
        if (modalBody) { modalBody.innerHTML = renderHistory(data.history); }
        else { closeModal(); }
    } catch (e) {
        console.error("El≈ëzm√©ny hiba:", e);
        const modalBody = document.getElementById('modal-body');
        if (modalBody) { modalBody.innerHTML = `<p style="color:var(--danger)...">Hiba: ${e.message}</p>`; }
        if (modalSkeleton) modalSkeleton.classList.remove('active');
    }
}

async function deleteHistoryItem(id) {
    if (!appState.sheetUrl) { showToast('URL sz√ºks√©ges.', 'error'); return; }
    if (!confirm("Biztosan t√∂r√∂lni szeretn√©d?")) return;
    const listItem = event ? event.target.closest('.list-item') : document.querySelector(`.list-item[data-id="${id}"]`); // Find item by data-id
    if (listItem) listItem.style.opacity = '0.5';

    try {
        const response = await fetch(appState.gasUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'text/plain;charset=utf-8' },
            body: JSON.stringify({ action: 'deleteHistoryItem', sheetUrl: appState.sheetUrl, id: id })
        });
        if (!response.ok) throw new Error(`Szerver hiba: ${response.statusText}`);
        const data = await response.json();
        if (data.error) throw new Error(data.error);
        showToast('Elem t√∂r√∂lve.', 'success');
        if (listItem) { listItem.remove(); }
        else { openHistoryModal(); } // Refresh if item not found
    } catch (e) {
        console.error("T√∂rl√©s hiba:", e); showToast(`Hiba: ${e.message}`, 'error');
        if (listItem) listItem.style.opacity = '1';
    }
}

async function buildPortfolio() {
    if (appState.completedAnalyses.length < 3) { showToast("Minimum 3 elemz√©s kell.", "info"); return; }
    const loadingHTML = document.getElementById('loading-skeleton')?.outerHTML || '<p>Bet√∂lt√©s...</p>';
    openModal('Napi Portf√≥li√≥ √âp√≠t√©se', loadingHTML, 'modal-lg');
    const modalSkeleton = document.querySelector('#modal-container #loading-skeleton');
    if (modalSkeleton) modalSkeleton.classList.add('active');

    try {
        const response = await fetch(appState.gasUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'text/plain;charset=utf-8' },
            body: JSON.stringify({ action: 'buildPortfolio', analyses: appState.completedAnalyses })
        });
        if (!response.ok) throw new Error(`Szerver hiba: ${response.statusText}`);
        const data = await response.json();
        if (data.error) throw new Error(data.error);
        const reportText = data.report || "Hiba: Riport hi√°nyzik.";
        const formattedReport = reportText.replace(/\*\*(.*?)\*\*/g,'<strong>$1</strong>').replace(/\n/g,'<br>').replace(/- /g,'&bull; ').replace(/### (.*?)(<br>|$)/g,'<h4>$1</h4>');
        const modalBody = document.getElementById('modal-body');
        if (modalBody) { modalBody.innerHTML = `<div class="portfolio-report"...>${formattedReport}</div>`; }
        if (modalSkeleton) modalSkeleton.classList.remove('active');
    } catch (e) {
        console.error("Portf√≥li√≥ hiba:", e);
        const modalBody = document.getElementById('modal-body');
        if (modalBody) { modalBody.innerHTML = `<p style="color:var(--danger)...">Hiba: ${e.message}</p>`; }
        if (modalSkeleton) modalSkeleton.classList.remove('active');
    }
}

async function runFinalCheck(home, away, sport) {
    const btn = event ? event.target : null;
    if (btn) { btn.disabled = true; btn.innerHTML = '...'; }
    const loadingHTML = document.getElementById('loading-skeleton')?.outerHTML || '<p>Bet√∂lt√©s...</p>';
    openModal('V√©gs≈ë Ellen≈ërz√©s', loadingHTML, 'modal-sm');
    const modalSkeleton = document.querySelector('#modal-container #loading-skeleton');
    if (modalSkeleton) modalSkeleton.classList.add('active');

    try {
        const openingOdds = JSON.parse(sessionStorage.getItem('openingOdds') || '{}');
        const decodedHome = decodeURIComponent(home);
        const decodedAway = decodeURIComponent(away);
        const response = await fetch(appState.gasUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'text/plain;charset=utf-8' },
            body: JSON.stringify({ action: 'runFinalCheck', sport, home: decodedHome, away: decodedAway, openingOdds })
        });
        if (!response.ok) throw new Error(`Szerver hiba: ${response.statusText}`);
        const data = await response.json();
        if (data.error) throw new Error(data.error);
        if (!data.signal || !data.justification) throw new Error("Hi√°nyos v√°lasz.");

        let signalColor, signalText; /*...*/
        switch(data.signal?.toUpperCase()) { case 'GREEN': signalColor='var(--success)'; signalText='Z√ñLD ‚úÖ'; break; case 'YELLOW': signalColor='var(--primary)'; signalText='S√ÅRGA ‚ö†Ô∏è'; break; case 'RED': signalColor='var(--danger)'; signalText='PIROS ‚ùå'; break; default: signalColor='var(--text-secondary)'; signalText='ISMERETLEN (?)'; }
        const lineupStatusHtml = data.lineupStatus ? `<p style="font-size: 0.9rem...">${data.lineupStatus}</p>` : '';
        const resultHtml = `<div style="text-align: center;"><h2 style="color: ${signalColor}...">${signalText}</h2><p style="font-size: 1.1rem...">${data.justification}</p>${lineupStatusHtml}</div>`;
        const modalBody = document.getElementById('modal-body');
        if (modalBody) modalBody.innerHTML = resultHtml;
        if (modalSkeleton) modalSkeleton.classList.remove('active');
    } catch (e) {
        console.error("V√©gs≈ë ellen≈ërz√©s hiba:", e);
        const modalBody = document.getElementById('modal-body');
        if (modalBody) modalBody.innerHTML = `<p style="color:var(--danger)...">Hiba: ${e.message}</p>`;
        if (modalSkeleton) modalSkeleton.classList.remove('active');
    } finally { if (btn) { btn.disabled = false; btn.innerHTML = '‚úîÔ∏è'; } }
}

// --- UI Seg√©df√ºggv√©nyek ---

function updatePortfolioButton(){const btn=document.getElementById('portfolioBtn');if(!btn)return;const count=appState.completedAnalyses.length;btn.textContent=`Portf√≥li√≥ √âp√≠t√©se (${count}/3)`;btn.disabled=count<3}
function openManualAnalysisModal(){let content=`<p class="muted"...</p><div class="control-group"><label...>Hazai...</label><input id="manual-home".../></div><div class="control-group"...><label...>Vend√©g...</label><input id="manual-away".../></div><button class="btn btn-primary" onclick="runManualAnalysis()" ...>Elemz√©s...</button>`;openModal('K√©zi Elemz√©s...',content,'modal-sm')}
function runManualAnalysis(){const homeInput=document.getElementById('manual-home');const awayInput=document.getElementById('manual-away');const home=homeInput?.value?.trim();const away=awayInput?.value?.trim();if(!home||!away){showToast('Mindk√©t n√©v kell.','error');return}closeModal();runAnalysis(home,away)}
function isMobile() { return window.innerWidth <= 1024; }

// --- getLeagueGroup v√°ltozatlan ---
function getLeagueGroup(leagueName) {
    const currentSport = appState.currentSport;
    console.log(`getLeagueGroup START - Liga: "${leagueName}", Sport: "${currentSport}"`);
    if (!currentSport || !LEAGUE_CATEGORIES[currentSport]) { console.error(`getLeagueGroup HIBA: √ârv√©nytelen sport ("${currentSport}")`); return '‚ùî V√°ltoz√©kony Mez≈ëny'; }
    const sportGroups = LEAGUE_CATEGORIES[currentSport];
    if (!leagueName || typeof leagueName !== 'string') { console.warn(`getLeagueGroup FIGYELMEZTET√âS: √ârv√©nytelen liga n√©v: "${leagueName}"`); return '‚ùî V√°ltoz√©kony Mez≈ëny'; }
    const lowerLeagueName = leagueName.toLowerCase().trim();
    for (const groupName in sportGroups) {
        if (Object.prototype.hasOwnProperty.call(sportGroups, groupName) && Array.isArray(sportGroups[groupName])) {
            try { if (sportGroups[groupName].some(l => typeof l === 'string' && lowerLeagueName.includes(l.toLowerCase()))) { console.log(`getLeagueGroup TAL√ÅLAT - Liga: "${leagueName}" -> Kateg√≥ria: "${groupName}"`); return groupName; }
            } catch (e) { console.error(`Hiba a liga keres√©sekor (${groupName}): ${e}`); }
        } else { console.warn(`getLeagueGroup FIGYELMEZTET√âS: Hib√°s strukt√∫ra: "${currentSport}" -> "${groupName}"`); }
    }
    if (lowerLeagueName.includes('cup') || lowerLeagueName.includes('kupa') || lowerLeagueName.includes('copa')) { console.log(`getLeagueGroup TAL√ÅLAT (Kupa) - Liga: "${leagueName}" -> Kateg√≥ria: "üé≤ Vad K√°rty√°k"`); return 'üé≤ Vad K√°rty√°k'; }
    console.log(`getLeagueGroup ALAP√âRTELMEZETT - Liga: "${leagueName}" -> Kateg√≥ria: "‚ùî V√°ltoz√©kony Mez≈ëny"`);
    return '‚ùî V√°ltoz√©kony Mez≈ëny';
}

// --- renderFixturesForDesktop v√°ltozatlan ---
function renderFixturesForDesktop(fixtures) {
    const board = document.getElementById('kanban-board'); if (!board) return; board.innerHTML = '';
    const groupOrder = ['üéØ Pr√©mium Elemz√©s', 'üìà Stabil Lig√°k', '‚ùî V√°ltoz√©kony Mez≈ëny', 'üé≤ Vad K√°rty√°k'];
    let groupedByCategory; try { groupedByCategory = groupBy(fixtures, fx => getLeagueGroup(fx.league)); } catch (e) { console.error("Csoportos√≠t√°si hiba (desktop):", e); board.innerHTML = `<p>Hiba.</p>`; return; }
    groupOrder.forEach(group => { const column = document.createElement('div'); column.className = 'kanban-column'; const [icon, ...titleParts] = group.split(' '); const title = titleParts.join(' '); let columnHeaderHTML = `<h4 class="kanban-column-header">${icon} ${title}</h4>`; let columnContentHTML = '<div class="column-content">'; const categoryFixtures = groupedByCategory ? groupedByCategory[group] : undefined;
        if (categoryFixtures?.length > 0) { const groupedByDate = groupBy(categoryFixtures, fx => { try { return new Date(fx.utcKickoff).toLocaleDateString('hu-HU', { timeZone: 'Europe/Budapest' }); } catch { return "?"; } }); const sortedDates = Object.keys(groupedByDate).sort((a, b)=>{ try { const dA=new Date(a.split('. ').join('.').split('.').reverse().join('-')); const dB=new Date(b.split('. ').join('.').split('.').reverse().join('-')); return dA - dB; } catch { return 0; } });
            sortedDates.forEach(dateKey => { columnContentHTML += `<details class="date-section" open><summary>${formatDateLabel(dateKey)}</summary>`; const sortedFixtures = groupedByDate[dateKey].sort((a, b) => new Date(a.utcKickoff) - new Date(b.utcKickoff));
                sortedFixtures.forEach(fx => { if (!fx?.home || !fx.away || !fx.league || !fx.utcKickoff || !fx.id) { console.warn('Kihagyva (desktop):', fx); return; } let time='N/A'; try{time=new Date(fx.utcKickoff).toLocaleTimeString('hu-HU',{timeZone:'Europe/Budapest',hour:'2-digit',minute:'2-digit'})}catch{} const safeHome=encodeURIComponent(fx.home); const safeAway=encodeURIComponent(fx.away); const leagueShort=fx.league.substring(0,25)+(fx.league.length>25?'...':'');
                    columnContentHTML += `<div class="match-card" data-id="${fx.id}"><input type="checkbox" class="fixture-checkbox" data-home="${safeHome}" data-away="${safeAway}" onchange="updateSummaryButtonCount()"><div class="match-content" onclick="runAnalysis('${safeHome}', '${safeAway}')"><div class="match-card-teams">${fx.home} ‚Äì ${fx.away}</div><div class="match-card-meta"><span title="${fx.league}">${leagueShort}</span><span>${time}</span></div></div></div>`; });
                columnContentHTML += `</details>`; });
        } else { columnContentHTML += '<p class="muted"...>Nincs meccs.</p>'; }
        columnContentHTML += '</div>'; column.innerHTML = columnHeaderHTML + columnContentHTML; board.appendChild(column); });
}
// --- renderFixturesForMobileList v√°ltozatlan ---
function renderFixturesForMobileList(fixtures) {
    const container = document.getElementById('mobile-list-container'); if (!container) return; container.innerHTML = '';
    const groupOrder = ['üéØ Pr√©mium Elemz√©s', 'üìà Stabil Lig√°k', '‚ùî V√°ltoz√©kony Mez≈ëny', 'üé≤ Vad K√°rty√°k'];
    let groupedByCategory; try { groupedByCategory = groupBy(fixtures, fx => getLeagueGroup(fx.league)); } catch (e) { console.error("Csoportos√≠t√°si hiba (mobil):", e); container.innerHTML = `<p>Hiba.</p>`; return; }
    let html = ''; let hasFixtures = false;
    groupOrder.forEach(group => { const categoryFixtures = groupedByCategory ? groupedByCategory[group] : undefined;
        if (categoryFixtures?.length > 0) { hasFixtures = true; const [icon, ...titleParts] = group.split(' '); const title = titleParts.join(' '); html += `<h4 class="league-header-mobile">${icon} ${title}</h4>`; const sortedFixtures = categoryFixtures.sort((a, b) => new Date(a.utcKickoff) - new Date(b.utcKickoff));
            sortedFixtures.forEach(fx => { if (!fx?.home || !fx.away || !fx.league || !fx.utcKickoff || !fx.id) { console.warn('Kihagyva (mobil):', fx); return; } let time='N/A', dateLabel='N/A'; try{const kickoffDate=new Date(fx.utcKickoff); time=kickoffDate.toLocaleTimeString('hu-HU',{timeZone:'Europe/Budapest',hour:'2-digit',minute:'2-digit'}); dateLabel=formatDateLabel(kickoffDate.toLocaleDateString('hu-HU',{timeZone:'Europe/Budapest'}))}catch{} const safeHome=encodeURIComponent(fx.home); const safeAway=encodeURIComponent(fx.away);
                html += `<div class="list-item mobile" data-id="${fx.id}"><input type="checkbox" class="fixture-checkbox" data-home="${safeHome}" data-away="${safeAway}" onchange="updateSummaryButtonCount()"><div class="match-content" onclick="runAnalysis('${safeHome}', '${safeAway}')"><div class="list-item-title">${fx.home} ‚Äì ${fx.away}</div><div class="list-item-meta">${fx.league} - ${dateLabel} ${time}</div></div> <svg ...>...</svg> </div>`; });
        } });
    if (!hasFixtures) { container.innerHTML = '<p class="muted"...>Nincsenek meccsek.</p>'; } else { container.innerHTML = html; }
}

function handleCheckboxChange() { updateSummaryButtonCount(); }
function updateSummaryButtonCount() { const count = document.querySelectorAll('.fixture-checkbox:checked').length; const summaryBtn = document.getElementById('summaryBtn'); if (summaryBtn) { summaryBtn.textContent = `Kiv√°lasztottak √ñsszegz√©se (${count})`; summaryBtn.disabled = count === 0; } }

function extractDataForPortfolio(html, home, away) { /*...*/ }
function renderHistory(historyData) { /*...*/ }
async function viewHistoryDetail(id) { /*...*/ }

// --- MODAL KEZEL√âS ---
function openModal(title, content = '', sizeClass = 'modal-sm') { /*...*/ }
function closeModal() { /*...*/ }
function openSummaryModal(title, content = '') { /*...*/ }
function closeSummaryModal() { /*...*/ }

// --- SEG√âDF√úGGV√âNYEK ---
// function groupBy(arr, keyFn) { /*...*/ } // M√°r fentebb van
// function formatDateLabel(dateStr) { /*...*/ } // M√°r fentebb van

// --- CHAT FUNKCI√ìK ---
async function sendChatMessage() { /*...*/ }
function addMessageToChat(text, role) { /*...*/ }

// --- TOAST √âRTES√çT√âSEK ---
function showToast(message, type = 'info', duration = 4000) { /*...*/ }

// --- T√âMAV√ÅLT√ì ---
function setupThemeSwitcher() { /*...*/ }
